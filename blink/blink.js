// Generated by CoffeeScript 2.5.1
(function() {
  //###############################################################################
  var audio, audioCtx, blink, blinkOff, blinkOn, blinkputHandler, div, input, light, mode, morseChars, osc, pwHash, randomizer, runBlink, runLockScreen, span, startAudio;

  window.onload = async function() {
    var pwHashStored;
    pwHashStored = (await secret.digest(vault.get('pw')));
    if (pwHashStored === pwHash) {
      return runBlink();
    } else {
      return runLockScreen();
    }
  };

  pwHash = "66ad717549fa79c845a74802f4df36781e2e0eab29fb0aa420b04dfb39944fd6";

  runLockScreen = function() {
    var changeHandler, lockScreen, shake;
    lockScreen = function() {
      return '<input class="lockScreen" type="password" placeholder="enter password"></input>';
    };
    changeHandler = async function() {
      var hash;
      hash = (await secret.digest($('input').value));
      if (hash === pwHash) {
        vault.set('pw', $('input').value);
        return runBlink();
      } else {
        $('input').value = '';
        $('input').placeholder = 'try again';
        shake($('input'));
        return log('yay');
      }
    };
    shake = function(node) {
      if (isString(node)) {
        node = $(node);
      }
      node.classList.remove('snake');
      log(node.offsetWidth);
      return node.classList.add('snake');
    };
    replaceInnerHTML('body', lockScreen());
    ($('input')).addEventListener('change', changeHandler);
    return css(`
select body
    fullscreen
    display grid
    bg #130d0d

select .lockScreen
    border none
    display block
    padding 20px
    place-self center
    bg rgb(40 40 40)
    border-radius 12px
    color black
    font 18px bold sans-serif

select *:focus
    outline none

select .snake
    animation shake-horizontal 250ms
`);
  };

  (function() {    //###############################################################################
    //$('title').text = 'test'
    css.preprocessors.fullscreen = function() {
      return `height 100vh
width 100vw
margin 0`;
    };
    return css.preprocessors.textClip = function(line) {
      return `background ${line.split(' ')[1]}
background-clip text
color transparent`;
    };
  })();

  //###############################################################################
  light = null;

  ({div, input, span} = html.elements());

  //###############################################################################
  audio = false;

  randomizer = false;

  mode = 'morse';

  audioCtx = null;

  osc = null;

  startAudio = function() {
    audioCtx = new AudioContext();
    osc = audioCtx.createOscillator();
    osc.frequency.value = 440;
    return osc.start();
  };

  window.knockLetters = {};

  (function() {
    var char, digits, i, idx, len, ref, results;
    ref = ' abcdefghijklmnopqrstuvwxyz';
    results = [];
    for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
      char = ref[idx];
      digits = (zFill(idx.toString(3), 3)).split('').map(function(digits) {
        var digit, j, len1, results1;
        results1 = [];
        for (j = 0, len1 = digits.length; j < len1; j++) {
          digit = digits[j];
          results1.push(parseInt(digit, 3) + 1);
        }
        return results1;
      }).join('');
      //log char, digits
      results.push(knockLetters[char] = digits);
    }
    return results;
  })();

  morseChars = `A .-
B -...
C -.-.
D -..
E .
F ..-.
G --.
H ....
I ..
J .---
K -.-
L .-..
M --
N -.
O ---
P .--.
Q --.-
R .-.
S ...
T -
U ..-
V ...-
W .--
X -..-
Y -.--
Z --..
1 .----
2 ..---
3 ...--
4 ....-
5 ......
6 -....
7 --...
8 ---..
9 ----.
0 -----`;

  scope(function() {
    var a, b, i, len, pair, ref, res;
    res = {};
    ref = morseChars.trim().split('\n');
    for (i = 0, len = ref.length; i < len; i++) {
      pair = ref[i];
      [a, b] = pair.split(' ');
      res[a] = b;
    }
    morseChars = res;
    return global({morseChars, startAudio});
  });

  //###############################################################################
  blinkOn = function() {
    light.classList.add('on');
    if (audio === true) {
      return osc.connect(audioCtx.destination);
    }
  };

  blinkOff = function() {
    light.classList.remove('on');
    return osc.disconnect();
  };

  blink = async function(duration) {
    if (randomizer === true) {
      osc.frequency.value = random(100, 1000);
      css({
        light: `rgb(${random(0, 255)} ${random(0, 255)} ${random(0, 255)})`
      });
    }
    blinkOn();
    await sleep(duration);
    return blinkOff();
  };

  //osc.frequency.value = random 100, 1000

  //###############################################################################
  scope(function() {
    var dash, dot, long, medium, morse, short, translateChar, translateText, translateWord;
    dot = 100;
    dash = dot * 3;
    short = dot;
    medium = dot * 3;
    long = dot * 7;
    translateText = function(text) {
      return text.split(' ').map(translateWord).join('l');
    };
    translateWord = function(word) {
      return word.split('').map(translateChar).join('m');
    };
    translateChar = function(char) {
      return morseChars[char.toUpperCase()].split('').join('s');
    };
    morse = async function(text) {
      var i, len, results, symbol, symbols;
      symbols = translateText(text);
      results = [];
      for (i = 0, len = symbols.length; i < len; i++) {
        symbol = symbols[i];
        switch (symbol) {
          case '.':
            results.push((await blink(dot)));
            break;
          case '-':
            results.push((await blink(dash)));
            break;
          case 's':
            results.push((await sleep(short)));
            break;
          case 'm':
            results.push((await sleep(medium)));
            break;
          case 'l':
            results.push((await sleep(long)));
            break;
          default:
            results.push(void 0);
        }
      }
      return results;
    };
    return global({morse, translateText, translateWord, translateChar});
  });

  //###############################################################################
  scope(function() {
    var knock, knockChar, knockDigit, knockLength, longPause, mediumPause, shortPause;
    knockLength = 100;
    shortPause = 100;
    mediumPause = 300;
    longPause = 700;
    knock = async function(text) {
      var char, i, len, results;
      results = [];
      for (i = 0, len = text.length; i < len; i++) {
        char = text[i];
        await knockChar(char);
        results.push((await sleep(longPause)));
      }
      return results;
    };
    knockChar = async function(char) {
      var digits;
      digits = knockLetters[char.toLowerCase()].split('');
      if (!digits) {
        return digits;
      }
      await knockDigit(digits[0]);
      await sleep(mediumPause);
      await knockDigit(digits[1]);
      await sleep(mediumPause);
      await knockDigit(digits[2]);
      return 'done';
    };
    knockDigit = async function(digit) {
      await blink(knockLength);
      if (parseInt(digit) > 1) {
        await sleep(shortPause);
        await blink(knockLength);
      }
      if (parseInt(digit) > 2) {
        await sleep(shortPause);
        return (await blink(knockLength));
      }
    };
    return global({knock, knockChar, knockDigit});
  });

  //###############################################################################
  blinkputHandler = function() {
    var text;
    text = ($('input')).value;
    if (text === 'soundOn') {
      audio = true;
    }
    if (text === 'soundOff') {
      audio = false;
    }
    if (text === 'randomOn') {
      randomizer = true;
    }
    if (text === 'randomOff') {
      randomizer = false;
    }
    if (text === 'startAudio') {
      startAudio();
    }
    if (text === 'knockMode') {
      mode = 'knock';
    }
    if (text === 'morseMode') {
      mode = 'morse';
    }
    if (text !== 'soundOn' && text !== 'soundOff' && text !== 'randomOn' && text !== 'randomOff' && text !== 'knockMode' && text !== 'morseMode' && text !== 'startAudio') {
      if (mode === 'knock') {
        knock(text);
      }
      if (mode === 'morse') {
        morse(text);
      }
    }
    return ($('input')).value = '';
  };

  runBlink = function() {
    log(['soundOn', 'soundOff', 'randomOn', 'randomOff', 'knockMode', 'morseMode']);
    log('startAudio()');
    replaceInnerHTML('body', div({
      id: 'box'
    }, div({
      id: 'blink'
    }), div({
      id: 'line'
    }, div({
      id: 'rndBtn',
      class: 'btnOff'
    }, 'RND'), input({
      id: 'blinkput'
    }), div({
      id: 'sndBtn',
      class: 'btnOff'
    }, 'SND'))));
    light = $('#blink');
    ($('input')).addEventListener('change', blinkputHandler);
    //($ '#rndBtn').addEventListener('click', rndClickHandler)
    //($ '#rndBtn').addEventListener('click', rndClickHandler)
    css.bind({
      light: 'rgb(255, 70, 70)',
      input: 'rgb(40, 40, 40)',
      btnOn: 'rgb(63, 106, 51)',
      btnOff: 'rgb(67, 67, 72)',
      border: 'ivory'
    });
    return css(`
select body
    fullscreen
    display grid
    bg #130d0d

select #blink
    place-self center
    height 150px
    width 150px
    bg rgb(10 10 10)
    border-radius 100%
    margin-bottom 60px

select #blink.on
    bg $light

select #box
    place-self center
    display grid

select #blinkput
    border none
    bg $input
    color black
    #margin 0px 10px
    #border-left 2px solid $border
    #border-right 2px solid $border
    padding 0px 10px
    font bold 14px sans-serif

select #line
    height 30px
    width 400px
    display grid
    #grid-template-columns 50px 1fr 50px
    grid-template-columns 1fr
    #border 2px solid $border

select #rndBtn, #sndBtn
    color black
    display none
    place-content center
    align-items center
    font bold 14px sans-serif

select .btnOn
    bg $btnOn

select .btnOff
    bg $btnOff

select *:focus
    outline none
`);
  };

  global({blinkOn, blinkOff, blink});

}).call(this);
